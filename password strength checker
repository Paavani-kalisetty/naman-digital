import re
common_passwords = [
    "123456", "password", "123456789", "12345678", "12345", "qwerty",
    "abc123", "football", "letmein", "monkey"
]
keyboard_sequences = [
    "qwerty", "asdfgh", "zxcvbn", "1234567890", "qazwsx", "1q2w3e"
]

def has_sequence(password, seq_length=3):
    password_lower = password.lower()
    for i in range(len(password_lower) - seq_length + 1):
        seq = password_lower[i:i+seq_length]
        if seq.isalpha() and ''.join(sorted(seq)) in 'abcdefghijklmnopqrstuvwxyz':
            return True
        if seq.isdigit() and ''.join(sorted(seq)) in '0123456789':
            return True
    return False

def has_repeated_chars(password, repeat_length=3):
    pattern = r'(.)\1{' + str(repeat_length-1) + r',}'
    return bool(re.search(pattern, password))

def check_password_strength(password):
    score = 0
    remarks = []

    if len(password) < 6:
        remarks.append("Password too short (min 6 characters).")
    elif len(password) < 10:
        score += 1
        remarks.append("Password length is moderate.")
    else:
        score += 2
        remarks.append("Good password length.")

    if re.search(r"[a-z]", password):
        score += 1
    else:
        remarks.append("Add lowercase letters.")

    if re.search(r"[A-Z]", password):
        score += 1
    else:
        remarks.append("Add uppercase letters.")

    if re.search(r"[0-9]", password):
        score += 1
    else:
        remarks.append("Add digits.")

    if re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        score += 1
    else:
        remarks.append("Add special characters.")

    if password.lower() in common_passwords:
        remarks.append("Avoid common passwords.")
        score = 0

    for seq in keyboard_sequences:
        if seq in password.lower():
            remarks.append(f"Avoid keyboard sequence: {seq}")
            score -= 1
            break

    if has_sequence(password):
        remarks.append("Avoid sequential characters like 'abc' or '123'.")
        score -= 1

    if has_repeated_chars(password):
        remarks.append("Avoid repeated characters like 'aaa' or '111'.")
        score -= 1

    if score <= 2:
        strength = "Weak"
    elif score <= 4:
        strength = "Moderate"
    else:
        strength = "Strong"

    return strength, remarks

# Main program
if __name__ == "__main__":
    user_password = input("Enter your password: ")
    strength, feedback = check_password_strength(user_password)

    print(f"\nPassword Strength: {strength}")
    print("Suggestions:")
    for remark in feedback:
        print("- " + remark)
